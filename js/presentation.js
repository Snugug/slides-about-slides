function createPresentation(){const a=window.PresentationRequest?new PresentationRequest([window.location.origin+window.location.pathname]):null,b={request:a,connection:null};return a&&(navigator.presentation.defaultRequest=b.request),b}async function receivePresentationControls(a){if(navigator.presentation&&navigator.presentation.receiver){const b=await navigator.presentation.receiver.connectionList;b.connections.map(b=>addPresentationConnection(b,a));}}function addPresentationConnection(a,b){a.send(JSON.stringify({start:!0})),a.addEventListener("message",a=>{const c=JSON.parse(a.data);c.hasOwnProperty("goto")&&b.dispatch("navigate",c.goto);}),b.changes.subscribe("index",b=>{a.send(JSON.stringify({goto:b.index}));});}function advancePresentation(a,b){a&&a.send(JSON.stringify({goto:b}));}function buildNotesPreviewLink(a){const b=window.location,c=new URLSearchParams,d=new URL(b.origin+b.pathname);return d.hash=`#/${a}`,c.set("embedded",!0),d.search=c.toString(),d.toString()}function updateNotes(a,b,c){a.current.src=buildNotesPreviewLink(b);let d=b+1;c.next||d--,a.next.src=buildNotesPreviewLink(d),a.content.innerHTML=c.notes?c.notes:"",a.index.textContent=b,c.hasOwnProperty("fragment")?(a.fragments.dataset.active=!0,a.currentFrag.textContent=c.fragment,a.totalFrag.textContent=c.totalFragments):(a.fragments.dataset.hasOwnProperty("active")&&delete a.fragments.dataset.active,a.currentFrag.textContent="",a.totalFrag.textContent="");}function timing(a){function b(){var a=Math.floor;const b=new Date,e=b.getTime()-i.getTime(),j=a(e/3600000),k=a(e/60000%60),l=a(e/1e3%60);d.textContent=b.toLocaleTimeString("en-US",{hour12:!1,hour:"2-digit",minute:"2-digit"}),f.textContent=c(j),g.textContent=`:${c(k)}`,h.textContent=`:${c(l)}`,f.setAttribute("data-mute",0>=j),g.setAttribute("data-mute",0>=k);}function c(a){const b=`00${parseInt(a)}`;return b.substring(b.length-2)}const d=a.querySelector(".clock--value"),e=a.querySelector(".timer"),f=a.querySelector(".timer--hours"),g=a.querySelector(".timer--minutes"),h=a.querySelector(".timer--seconds");let i=new Date;b();let j=setInterval(b,1e3);e.addEventListener("click",()=>{i=new Date,clearInterval(j),f.textContent=c(0),g.textContent=`:${c(0)}`,h.textContent=`:${c(0)}`,j=setInterval(b,1e3);});}function notesBody(){const a=document.createElement("section");return a.classList.add("_speaker-notes"),a.innerHTML="<div class=\"_speaker-notes--current\"> <iframe class=\"_speaker-notes--slide-preview\" frameborder=\"0\" height=\"1024\" width=\"1280\"></iframe> </div><div class=\"_speaker-notes--upcoming\"> <span class=\"_speaker-notes--label\">Upcoming:</span> <iframe class=\"_speaker-notes--slide-preview\" frameborder=\"0\" height=\"1024\" width=\"1280\"></iframe> </div><div class=\"_speaker-notes--controls\"> <div class=\"controls\"> <div class=\"controls--time\"> <h4 class=\"controls--label\">Time <span class=\"controls--reset\">Click to Reset</span></h4> <button class=\"timer\"> <span class=\"timer--hours\">00</span><span class=\"timer--minutes\">:00</span><span class=\"timer--seconds\">:00</span> </button><div class=\"clock\"> <span class=\"clock--value\">0:00 AM</span> </div></div><div class=\"controls--position\"> <p class=\"controls--fragment\">Fragment <span class=\"controls--fragment-current\"></span>/<span class=\"controls--fragment-total\"></span></p><p class=\"controls--slide\">Step <span class=\"controls--slide-current\"></span>/<span class=\"controls--slide-total\"></span></p></div></div></div><article class=\"_speaker-notes--notes\"> <div class=\"slide-notes\"> <h4 class=\"slide-notes--label\">Notes</h4> <div class=\"slide-notes--content\"></div></div></article>",timing(a),{_notes:a,current:a.querySelector("._speaker-notes--current ._speaker-notes--slide-preview"),next:a.querySelector("._speaker-notes--upcoming ._speaker-notes--slide-preview"),content:a.querySelector(".slide-notes--content"),index:a.querySelector(".controls--slide-current"),total:a.querySelector(".controls--slide-total"),fragments:a.querySelector(".controls--fragment"),currentFrag:a.querySelector(".controls--fragment-current"),totalFrag:a.querySelector(".controls--fragment-total")}}

export { createPresentation, receivePresentationControls, addPresentationConnection, advancePresentation, buildNotesPreviewLink, updateNotes, timing, notesBody };
//# sourceMappingURL=presentation.js.map
