import { createPresentation } from './presentation.js';

class StageFrightNode{constructor(a){this.elem=a,this.previous=null,this.next=null,this.first=!1,this.notes=null,a.classList.contains("_stage--slide")?(this.type="slide",a.parentNode.firstElementChild===a&&(this.first=!0)):a.classList.contains("fragment")&&(this.type="fragment");const b=a.querySelector("._stage--notes");b&&(this.notes=b.innerHTML);}}class StageFrightList{constructor(){this._head=null,this._tail=null,this._length=0,this._sectionHolder=-1,this._depthHolder=0,this._fragmentHolder=0,this._fragmentDepth=[];}add(a){const b=new StageFrightNode(a);let c=this._head;return (b.first?(this._sectionHolder++,this._depthHolder=0):"fragment"!==b.type&&this._depthHolder++,"fragment"===b.type?(this._fragmentHolder++,b.fragment=this._fragmentHolder):0!==this._fragmentHolder&&(this._fragmentDepth.push(this._fragmentHolder),this._fragmentHolder=0),b.section=this._sectionHolder,b.depth=this._depthHolder,b.previous=this._tail,this._length++,!c)?(this._head=b,this._tail=b,b):(this._tail.next=b,this._tail=b,"fragment"===b.type&&"fragment"!==b.previous.type&&(b.previous.fragment=0),"fragment"===b.type&&b.previous.notes&&(b.notes=b.previous.notes),b)}find(a){if(a=parseInt(a),a>this._length-1||0>a)return !1;if(0===a)return this._head;if(a===this._length-1)return this._tail;const b=a<=Math.floor(this._length/2);let c=this._head,d=1;if(b)do c=c.next,d++;while(d<=a);else{c=this._tail,d=this._length-2;do c=c.previous,d--;while(d>=a)}return c}forEach(a){let b=this._head,c=0;for(;b.next;)a(b,c),b=b.next,c++;a(b);}updateFragments(){const a=this._fragmentDepth.reverse();let b=a.pop();this.forEach(c=>{c.hasOwnProperty("fragment")&&(c.totalFragments=b,"fragment"!==c.next.type&&(b=a.pop()));});}buildProgress(a,b){this.forEach((a,c)=>{a.progress="slide"===a.type?b(c,a.section,a.depth,a.hasOwnProperty("fragment")):a.previous.progress;});}}

class PubSub{constructor(){this.events={};}subscribe(a,b){return this.events[a]||(this.events[a]=[]),this.events[a].push(b)}publish(a,b={}){return this.events[a]?this.events[a].map(a=>a(b)):[]}}

class Store{constructor(a={}){const b=this;this.actions=a.actions||{},this.mutations=a.mutations||{},this.status="resting",this.changes=new PubSub,this.stage=a.stage||{},this.progress=a.progress||[],this.root=a.root||document.body,this.state=new Proxy(a.state||{},{set:function(a,c,d){return a[c]=d,"mutation"!==b.status&&console.warn(`You should use a mutation to set ${c}`),b.changes.publish(`${c}`,b.state),b.changes.publish("stateChange",b.state),!0}});}dispatch(a,b){return "function"==typeof this.actions[a]?(this.status="action",this.actions[a](this,b),!0):(console.error(`Action "${a}" doesn't exist`),!1)}async commit(a,b){if("function"!=typeof this.mutations[a])return console.error(`Mutation "${a}" doesn't exist`),!1;this.status="mutation";let c=this.mutations[a](Object.assign({},this.state),b);return "then"in c?(c=await c,this.state=Object.assign(this.state,c)):this.state=Object.assign(this.state,c),!0}}

var mutations = {navigate(a,b){return "next"===b&&a.current.next?(a.current=a.current.next,++a.index):"previous"===b&&a.current.previous?(a.current=a.current.previous,--a.index):"next"!=b&&"previous"!=b&&(a.current=b),a},index(a,b){return a.index=b,a},progress(a){const b=a.progress;return a.progress=a.current.progress,a.progress&&(b&&b!==a.progress&&b.dataset.hasOwnProperty("active")&&delete b.dataset.active,a.progress.dataset.active=!0,a.current.hasOwnProperty("fragment")&&(a.current.fragment===a.current.totalFragments?a.progress.dataset.fragments=!1:a.progress.dataset.fragments=!0)),a},async notes(a,{root:b,length:c}){if(a.presentation.request)if(!a.presentation.connection)try{const d=await a.presentation.request.start();a.presentation.connection=d;const{notesBody:e,updateNotes:f,advancePresentation:g}=await import("./presentation.js"),h=e();b.parentNode.insertBefore(h._notes,b),b.dataset.hidden=!0,b.parentNode.dataset.notes=!0,f(h,a.index,a.current),h.total.textContent=c-1,a.presentation.notes=h;}catch(a){console.log(a),console.error("There was an error establishing a connection");}else b.parentNode.removeChild(a.presentation.notes._notes),delete b.dataset.hidden,delete b.parentNode.dataset.notes,a.presentation.connection.terminate(),a.presentation.connection=null,a.presentation.notes=null;return a},display(a){return a.display="presentation"===a.display?"article":"presentation",a}};

var actions = {navigate(a,b){if("next"===b||"previous"===b)a.commit("navigate",b);else{const c=a.stage.find(b);a.commit("navigate",c),a.commit("index",b);}a.embedded||a.commit("progress","toggle");},notes(a){a.commit("notes",{root:a.root,length:a.stage._length});},display(a,b){a.commit("display",b);}};

function translate(a,b){const c=`translate(${-100*b.section}vw) translateY(${-100*b.depth}vh)`;a.style.transform=c;}

function fragments(a){let b=!1;if("fragment"===a.type){const c=a.elem.dataset;if(!c.hasOwnProperty("active")||"false"===c.active){c.active=!0;for(let b=a.previous;b&&"fragment"===b.type;)b.elem.dataset.active=!0,b=b.previous;b=!0;}}!1==b&&a.next&&"fragment"===a.next.type&&delete a.next.elem.dataset.active;}

function navHash(a){const b=new URL(window.location);let c=0;return b.hash&&(c=parseInt(b.hash.split("/")[1])),0>c?c=0:c>a&&(c=a),c}

function updateHistory(a){history.pushState(null,null,`#/${a}`);}

class StageFright{constructor(a,b={spacebar:!0,remote:!0}){const c=document.querySelector(a);c.parentNode.classList.add("stage-fright");const d=Array.from(c.querySelectorAll("._stage--slide, .fragment")),e=new StageFrightList;d.forEach(a=>{e.add(a);}),e.updateFragments();const f="true"===new URLSearchParams(window.location.search).get("embedded");f&&c.parentNode.classList.add("embedded");const g=navHash(e.length-1);this.store=new Store({actions,mutations,progress:"foo",state:{current:e._head,progress:null,index:g,notes:!1,presentation:createPresentation(),display:"presentation"},stage:e,embedded:f,root:c}),this.store.changes.subscribe("current",async a=>{if(translate(c,a.current),fragments(a.current),a.presentation.notes){const{updateNotes:b}=await import("./presentation.js");b(a.presentation.notes,a.index,a.current);}}),this.store.changes.subscribe("index",async a=>{if(updateHistory(a.index),!f){const{advancePresentation:b}=await import("./presentation.js");b(a.presentation.connection,a.index);}if(a.presentation.notes){const{updateNotes:b}=await import("./presentation.js");b(a.presentation.notes,a.index,a.current);}}),this.store.changes.subscribe("display",a=>{"presentation"===a.display?(c.parentNode.classList.add("stage-fright"),document.body.scrollTop=document.documentElement.scrollTop=0):c.parentNode.classList.remove("stage-fright");}),this.store.changes.subscribe("presentation",async a=>{if(a.presentation.connection){const{advancePresentation:b}=await import("./presentation.js");a.presentation.connection.addEventListener("message",c=>{const d=JSON.parse(c.data);d.start&&b(a.presentation.connection,a.index),d.goto!==a.index&&this.goto(d.goto);});}}),requestIdleCallback(()=>{f?this.goto(g):import("./upgrade.js").then(({upgrade:a})=>{a.bind(this)(e,c,g,b);});},{timeout:500}),window.addEventListener("hashchange",()=>{const a=navHash(e.length-1);this.goto(a);}),import("./lazyload.js").then(({default:a})=>a());}next(){this.store.dispatch("navigate","next");}previous(){this.store.dispatch("navigate","previous");}goto(a){this.store.dispatch("navigate",a);}}

window.addEventListener("DOMContentLoaded",()=>{const a=new StageFright("._stage");window.stage=a;}),window.addEventListener("load",async()=>{await import("./prismjs.js"),await import("./prism-javascript.js");});
//# sourceMappingURL=main.js.map
